{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["title","props","react_default","a","createElement","className","form","state","value","handleChange","e","_this","setState","target","_this2","this","onSubmit","submitted","type","name","placeholder","onChange","disabled","React","Component","weather","temperature","city","country","date","temperatureMax","temperatureMin","pollution","style","color","fontWeight","error","API_KEY","API_TOKEN","App","undefined","getWeather","_callee","api_call","data","api_token_call","dataPollution","regenerator_default","wrap","_context","prev","next","preventDefault","elements","fetch","concat","sent","json","console","log","Number","list","main","temp","toFixed","temp_max","temp_min","description","iaqi","pm25","v","dt_txt","stop","Titles","components_Form","Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dee11df5.chunk.js","sourcesContent":["import React from 'react';\n \nconst title = props => {\n\n        return(\n            <div>\n                <h1 className='title-container__tittle'>Weather App</h1>\n                <h3 className='title-container__subtittle'>Find out temperature, conditions and more...</h3>\n            </div>\n        )\n    }\n\n\n \nexport default title;","import React from 'react';\n\nimport './Form.css'\n \nclass form extends React.Component{ \n    state = {\n        value: ''\n    }\n    handleChange = (e) => {\n        this.setState({value: e.target.value})\n      }\n    render ( ) {\n        return (\n            <form onSubmit={this.props.submitted} >\n                <input type='text' name='city' placeholder='City' />\n                <input onChange={(e) => this.handleChange(e)} type='text' name='country' value={this.state.value} placeholder='Country' />\n                <button disabled={!this.state.value}>Get Weather!</button>\n            </form>        \n\n        )\n    }\n}\n\nexport default form;\n\n","import React from 'react';\n \nconst weather = props => { \n\n        return (\n            <div className='weather__info'>\n                {props.temperature ? (\n                <div>\n                <p className='weather__key'>City:<span className='weather__value'> {props.city}, {props.country}</span></p>\n                <p className='weather__key'>Date:<span className='weather__value'> {props.date}</span></p>\n                <p className='weather__key'>Temperature: <span className='weather__value'> {props.temperature} °C</span></p>\n                <p className='weather__key'>Temperature MAX:<span className='weather__value'> {props.temperatureMax} °C</span></p>\n                <p className='weather__key'>Temperature MIN:<span className='weather__value'> {props.temperatureMin} °C</span></p>\n                <p className='weather__key'>Weather:<span className='weather__value'> {props.weather}</span></p>\n                <p className='weather__key'>Pollution Quality:\n                    {props.pollution < 50 && <span style={{color: 'lime', fontWeight: 'bold'}} className='weather__value'> Good! {props.pollution}.</span>}\n                    {props.pollution > 51 && props.pollution < 100 && <span style={{color: 'yellow', fontWeight: 'bold'}} className='weather__value'> Moderate! {props.pollution}. </span>}\n                    {props.pollution > 101 && props.pollution < 150 && <span style={{color: 'orange', fontWeight: 'bold'}} className='weather__value'> Unhealthy! {props.pollution}. </span>}\n                    {props.pollution > 151 && props.pollution < 200 && <span style={{color: 'red', fontWeight: 'bold'}} className='weather__value'> Unhealthy+! {props.pollution}. </span>}\n                    {props.pollution > 201 && props.pollution < 300 && <span style={{color: 'purple', fontWeight: 'bold'}} className='weather__value'> Very Unhealthy! {props.pollution}. </span>}\n                    {props.pollution > 301 && <span style={{color: 'brown', fontWeight: 'bold'}} className='weather__value'> Hazardous! {props.pollution}. </span>}\n                    </p>\n                </div>\n\n                ) : <p className='weather__error'>{props.error}</p>}\n            </div>\n        )\n    }\n\nexport default weather;","import React, { Component } from 'react';\n\nimport Titles from './components/Titles'\nimport Form from './components/Form'\nimport Weather from './components/Weather'\n\nimport './App.css';\n\n\nconst API_KEY = '57f2826191d13aed90ab2d2abd4d2a06';\nconst API_TOKEN = 'd6cf9d4e250f2fb9e0889fe261dd26b158b7c7e4';\n\nclass App extends Component {\n  state = {\n    city: undefined,\n    country: undefined,\n    temperature: undefined,\n    temperatureMax: undefined,\n    temperatureMin: undefined,\n    weather: undefined,\n    date: undefined,\n    pollution: undefined,\n    error: undefined,\n\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&APPID=${API_KEY}`)\n    const data = await api_call.json();\n\n    const api_token_call = await fetch(`https://api.waqi.info/feed/${city}/?token=${API_TOKEN}`)\n    const dataPollution = await api_token_call.json();\n    console.log(dataPollution)\n\n    if (city && country) {\n      console.log(data)\n      this.setState({\n      city: data.city.name,\n      country: data.city.country,\n      temperature: (Number(data.list[0].main.temp) - 273).toFixed(2),\n      temperatureMax: (Number(data.list[0].main.temp_max) - 273).toFixed(2),\n      temperatureMin: (Number(data.list[0].main.temp_min) - 273).toFixed(2),\n      weather: data.list[0].weather[0].description,\n      pollution: dataPollution.data.iaqi.pm25.v,\n      date: data.list[0].dt_txt,\n      })\n    } else {\n      this.setState({\n        city: undefined,\n        country: undefined,\n        temperature: undefined,\n        temperatureMax: undefined,\n        temperatureMin: undefined,\n        weather: undefined,\n        date: undefined,\n        error: 'Please enter the values'\n      })\n    }\n  }\n\n\n\n  render() {\n\n    return (\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-xs-5 title-container'>\n                  <Titles />\n                </div>\n                <div className='col-xs-7 form-container'>\n                  <Form \n                    submitted={this.getWeather} />\n                  <Weather \n                    city={this.state.city}\n                    country={this.state.country}\n                    temperature={this.state.temperature}\n                    temperatureMax={this.state.temperatureMax}\n                    temperatureMin={this.state.temperatureMin}\n                    weather={this.state.weather}\n                    date={this.state.date}\n                    pollution={this.state.pollution}\n                    error={this.state.error} />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>  \n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}